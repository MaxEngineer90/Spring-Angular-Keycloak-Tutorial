name: Build, Version and Push Docker Images

on:
  push:
    branches:
      - main
      - 'feature/**'

jobs:
  backend:
    name: Build and Push Backend Docker Image
    runs-on: ubuntu-latest
    needs: version
    steps:
      - name: Checkout code
        uses: actions/checkout@v2

      - name: Set up JDK
        uses: actions/setup-java@3
        with:
          java-version: '21'  # Verwende Java 21

      - name: Build Backend
        run: ./gradlew build

      - name: Build Backend Docker Image
        run: docker build -t <dockerhub_username>/backend:${{ steps.version.outputs.new_version }} -f Dockerfile.backend .

      - name: Login to Docker Hub
        uses: docker/login-action@v2
        with:
          username: ${{ secrets.DOCKER_USERNAME }}
          password: ${{ secrets.DOCKER_PASSWORD }}

      - name: Push Backend Docker Image
        run: docker push <dockerhub_username>/backend:${{ steps.version.outputs.new_version }}

  frontend:
    name: Build and Push Frontend Docker Image
    runs-on: ubuntu-latest
    needs: version
    steps:
      - name: Checkout code
        uses: actions/checkout@v4.2.0

      - name: Install Node.js
        uses: actions/setup-node@v3.2.0
        with:
          node-version: '20.18.0'  # Verwende Node.js 20.18.0

      - name: Build Frontend
        run: npm install && npm run build:ssr  # Nutze Angular v18 mit SSR

      - name: Build Frontend Docker Image
        run: docker build -t <dockerhub_username>/frontend:${{ steps.version.outputs.new_version }} -f Dockerfile.frontend .

      - name: Login to Docker Hub
        uses: docker/login-action@v2
        with:
          username: ${{ secrets.DOCKER_USERNAME }}
          password: ${{ secrets.DOCKER_PASSWORD }}

      - name: Push Frontend Docker Image
        run: docker push <dockerhub_username>/frontend:${{ steps.version.outputs.new_version }}
